import { ItmStore } from './itm_store.jsy'
import { ItmViewmap } from './itm_viewmap.jsy'
import { ItmElement } from './itm_element.jsy'

import { imm_evt, itm_disco, _itm_ctx_ } from './itm_utils.jsy'


export class Itermusing extends HTMLElement ::
  async connectedCallback() ::
    this._evt_rm?.()
    await this.init_deps()
    this._evt_rm = imm_evt @ this.parentNode, @{}
      itm_disco: (event) => ::
        event.detail.store ??= this.store
        event.detail.views ??= this.viewmap

  disconnectedCallback() ::
    this._evt_rm?.()

  async init_deps() ::
    let {store} = this, init_ctx
    for let attr of this.getAttributeNames() ::
      if /^(init|dep)(-\w+)?/.test(attr) ::
        // lazy initialize init_ctx if used
        init_ctx ??= _itm_ctx_.with @:
          store, viewmap: this.viewmap, elem: this

        let dep = await store.import_at(this.getAttribute(attr))
        await dep.itm_init?.(init_ctx)

        if /^init/.test(attr) :: this.removeAttribute(attr)




const import_opt = new URL(import.meta.url).searchParams
if import_opt.has('boot') ::
  customElements.define @ 'iter-musing',
    class extends Itermusing ::
      store = new ItmStore(this)
      viewmap = new ItmViewmap(this)

  for let suffix of 'n b i ib f if g ig li tr tbl'.split(' ') ::
    customElements.define @ 'itm-'+suffix,
      class extends ItmElement ::


export * from './itm_utils.jsy'
export * from './itm_store.jsy'
export * from './itm_viewmap.jsy'
export * from './itm_element.jsy'

