import { itm_context, itm_root } from './itm_context.jsy'
import { itm_dynamic } from './itm_dynamic.jsy'


export class ItmCore extends HTMLElement ::
  _ctx_ = itm_context

  async connectedCallback() ::
    this.abort_ctl?.abort('conn')
    this.signal = (this.abort_ctl = new AbortController()).signal
    try ::
      let ctx = this.ctx = await @ this.ctx ??= this._itm_init()
      if ! this.signal.aborted ::
        await this._itm_conn?.(ctx)
        await ctx?.wc_connect?.()
    catch err ::
      this.abort_ctl.abort('err:'+err)
      throw err

  async _itm_init() ::
    let ctx = await this._ctx_.with({wc: this})
    ctx = await this._itm_import_attrs(ctx)
    return ctx

  async _itm_import_attrs(ctx) ::
    for let [attr, import_url] of _itm_import_attrs(this) ::
      ctx = await this._itm_import_at(ctx, attr, import_url)
    return ctx

  async _itm_import_at(ctx, attr, import_url) ::
    let module = await ctx.import_at(import_url)
    return ctx = await module?.itermuse?.(ctx) ?? ctx

  disconnectedCallback() ::
    let ctx = this.ctx
    this.abort_ctl.abort('dis')
    this.ctx = null
    return ctx?.wc_disconnect?.()

  itm_reload() ::
    if this.isConnected ::
      // use a proxy dom element
      let pxy = this.ownerDocument.createElement('del')
      this.replaceWith(pxy) // invoke disconnected
      pxy.replaceWith(this) // invoke connected
      return true
    return false

export {ItmCore as ItmModel}


/////////////////////////////////////////
// ItmView provides an extended context prototype for DOM rendering

export class ItmView extends ItmCore ::
  _ctx_ = itm_dynamic


/////////////////////////////////////////
// ItmRoot publishes shared values: stg and mime

export class ItmRoot extends ItmCore ::
  _ctx_ = itm_root

  async _itm_init() ::
    let itm_pub = Object.entries(this.itm_pub)
    let ctx = this._ctx_.with({wc: this, itm_pub})

    for let [attr, val] of itm_pub ::
      ctx[attr] = val?.then ? await val : val

    ctx = await this._itm_import_attrs(ctx)

    let el_tgt=this.parentNode
    for let [attr] of itm_pub ::
      // itm_find_stg, itm_find_mimeview
      el_tgt.addEventListener @
        `itm_find_${attr}`
        evt => :: evt.detail.push(ctx[attr])
        @{} signal: this.signal, passive: true

    return ctx

  _itm_conn() ::
    this.dispatchEvent @
      new CustomEvent('itm_root', {bubbles: true})



/////////////////////////////////////////
// Import via element attributes

const _rx_dep = /^dep(?:-\w+)?/, _rx_init = /^init(?:-\w+)?/
function * _itm_import_attrs(elem, test, test_init) ::
  for let attr of elem.getAttributeNames() ::
    let init = _rx_init.test(attr)
    if init || _rx_dep.test(attr) ::
      let val = elem.getAttribute(attr)
      if init :: elem.removeAttribute(attr)
      yield [attr, val]

