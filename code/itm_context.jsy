
// imm-dom inspired tiny DOM rendering utility
function imtiny(el, attr, ...z) ::
  if null != el ::
    if ! el.nodeType :: el = document.createElement(el)
    for let [k,v] of Object.entries(attr) ::
      el.setAttribute(k, v)
    el.append(...z.flat(9))
  return el


export const itm_base = @{}
  __proto__: null

  with(kw) :: return {__proto__: this, ...kw}
  set(kw) :: return Object.assign(this, kw)


  itm_disco(evt, list, fn=Boolean) ::
    let detail = list ?? []
    this.wc.dispatchEvent @
      new CustomEvent(evt, { detail, composed: true, bubbles: true })
    return list ? detail.filter(fn) : detail.find(fn)

  async itm_disco_update() ::
    let wc=this.wc, signal=wc.signal, el_root=wc.ownerDocument.documentElement
    await new Promise @ on_update =>
      el_root.addEventListener @ 'itm_root', on_update,
          { signal, once: true, passive:true }
    return ! signal.aborted


  async find_stg() ::
    let stg = this.stg
    while ! stg ::
      stg = this.itm_disco('itm_find_stg')
      if stg :: return this.stg = stg

      if ! await this.itm_disco_update() :: return
    return stg

  async import_at(ref, opt) ::
    ref &&= new URL(ref, opt?.base_url ?? globalThis.location)

    if 'kbc:' === ref?.protocol ::
      let stg = this.stg ?? await this.find_stg()
      let ab = await this.stg.kbc_fetch(ref.pathname, {signal: this.wc.signal})
      ref = !ab ? null : URL.createObjectURL @
        new Blob([ab], {type: 'text/javascript'})

    if ref ::
      let module = await import(/* @vite-ignore */ ref, {... opt})
      return module

  async fetch_content(ref, mime, fetch_opt) ::
    ref &&= new URL(ref, 'kbc:')

    if 'kbc:' === ref?.protocol ::
      let stg = this.stg ?? await this.find_stg()
      let ab = await stg.kbc_fetch(ref.pathname)
      ab &&= new Blob([ab], {type: mime})
      return ab

    if ref ::
      let resp = await fetch @ ref,
        @{} signal: this.wc.signal, ...fetch_opt
      return await resp


  imtiny
  async view_pre_text(content) ::
    content = await (await content)?.text()
    return imtiny('pre', {class: 'itm-pre'}, ''+content)


export const itm_root = @{}
  __proto__: itm_base
  base: itm_base

  async mimeview_when(preconditions, sub_mimeview) ::
    sub_mimeview = sub_mimeview[Symbol.iterator]?.()
      ?? Object.entries(sub_mimeview)

    let mimeview = this.mimeview
    mimeview.set.call // validate mimeview is available

    for let c of [preconditions].flat(2) ::
      if c?.trim :: c = customElements.whenDefined(c)
      c = await c

    for let [type, view] of sub_mimeview ::
      mimeview.set(type, view)
    return true


export const itm_context = @{}
  __proto__: itm_base
  base: itm_base

  async load_content() ::
    return this.content ??= await this.fetch_content @
      this.wc.getAttribute('k'), this.wc.getAttribute('mime')

  async store_content(content) ::
    let wc=this.wc, k=wc.getAttribute('k') ?? this.new_key()
    content = await content
    let stg = this.stg ?? await this.find_stg()
    let err = await stg.kbc_store(k, content, {signal: wc.signal})
    if err :: throw err
    this.content = content
    return {k}

  new_key(prefix='kbc:/dom/') ::
    let k = crypto.getRandomValues(new Uint32Array(4))
      .reduce @
        (s,v) => s+v.toString(16).padStart(8,'0')
        prefix

    this.wc.setAttribute('k', k)
    return k

