import { imm_on, imm_wcemit } from 'imm-dom'

export class ItmDisco ::
  static register(el_itm_root, itm_disco) ::
    let signal = el_itm_root.abort?.signal
    if signal?.aborted :: return

    imm_on @ el_itm_root.parentNode,
      @{} itm_disco(evt) :: itm_disco(evt.detail)
      @{} signal

    this._disco_impluse?.resolve(this)
    this._disco_impluse = null

  static on_update() ::
    this._disco_impluse ??= Promise.withResolvers()
    return this._disco_impluse.promise


  static async * discover(el, opt) ::
    let signal = opt?.signal
    let disco = new this()
    while ! signal.aborted ::
      imm_wcemit(el, 'itm_disco', disco)
      yield disco

      await this.on_update()

  viewmaps = []
  find_mime(mime) ::
    for let tgt of this.viewmaps ::
      let view = tgt.find_mime?.(mime) ?? tgt.get?.(mime)
      if view :: return view


