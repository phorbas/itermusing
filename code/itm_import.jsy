import {itm_attrs} from './itm_utils.jsy'


const _rx_dep = /^dep(?:-\w+)?/, _rx_init = /^init(?:-\w+)?/
export const itm_import_attrs = elem =>
  itm_attrs(elem, _rx_dep, _rx_init)


export async function import_at(stg, url_or_key, opt) ::
  url_or_key = new URL(url_or_key, opt?.base_url ?? globalThis.location)

  if 'bkc:' === url_or_key.protocol ::
    url_or_key = await bkc_as_import_url(stg, url_or_key, opt)

  return await import(/* @vite-ignore */ url_or_key, {... opt})


const _bkc_cache = new Map()
export async function bkc_as_import_url(stg, bkckey, opt) ::
  let dyn_url = _bkc_cache.get(bkckey)
  if undefined === dyn_url ::
    stg = await stg
    let ab = await stg.bkc_fetch(bkckey.pathname, {signal: opt?.signal})
    if ! ab :: return null

    dyn_url = URL.createObjectURL( new Blob([ab], {type: 'text/javascript'}) )
    _bkc_cache.set(bkckey, dyn_url ?? null)
  return dyn_url

