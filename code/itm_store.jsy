import { opaque_basic as opaque } from '@phorbas/opaque/esm/web/index.mjs'
import { phorbas_store, hex_to_u8 } from '@phorbas/store'
import bkc_with_dom from '@phorbas/store/esm/web/web_dom.mjs'
//import bkc_with_web_db from '@phorbas/store/esm/web/web_db.mjs'
//db: phorbas_store @ bkc_with_web_db(), {opaque}

const _rx_cdn = /^https?:\/\/|^\//

export class ItmStore ::
  constructor(host_elem) ::
    let boot = phorbas_store @ bkc_with_dom(host_elem), {opaque}
    this.stg = @{} boot, db: boot

  async content_at(key, mime) ::
    let loc = 'db'
    if key.includes('~') ::
      [loc, key] = key.split('~')

    let stg = await this.stg[loc]
    let res = await stg.fetch_content(hex_to_u8(key))
    return res ? new Blob([res], {type:mime}) : res

  _url_cache = new Map()
  content_url_at(key, mime) ::
    let res = this._url_cache.get(key)
    if ! res ::
      this._url_cache.set @ key, res = @
        this.content_at(key, mime)
          .then @ res => URL.createObjectURL(res)
    return res

  async import_at(url_or_key, opt) ::
    let js_url = _rx_cdn.test(url_or_key)
      ? new URL(url_or_key, globalThis.location)
      : await this.content_url_at(url_or_key, 'text/javascript')
    return import(/* @vite-ignore */ js_url, {... opt})

