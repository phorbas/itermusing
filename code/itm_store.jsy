import { imm_evt } from 'imm-dom'

import { opaque_basic } from '@phorbas/opaque/esm/web/index.mjs'
import { phorbas_store, hex_to_u8 } from '@phorbas/store'
import { bkc_with_js_map } from '@phorbas/store'
import bkc_with_web_db from '@phorbas/store/esm/web/web_db.mjs'
//import bkc_with_web_cache from '@phorbas/store/esm/web/web_cache.mjs'

import { itm_find_host } from './itm_utils.jsy'
import {_mock_init_store} from './_mock_data.jsy'


export class ITMStore ::
  constructor(_stg_) :: this._stg_ = _stg_
  as_itm_store() :: return this

  async content_at(key, mime) ::
    let bk = hex_to_u8(key)
    let res = await this._stg_.fetch_content(bk)
    return res ? new Blob([res], {type:mime}) : res

  _url_cache = new Map()
  content_url_at(key, mime) ::
    let res = this._url_cache.get(key)
    if ! res ::
      this._url_cache.set @ key, res = @
        this.content_at(key, mime)
          .then @ res => URL.createObjectURL(res)
    return res


export class ItermusingStore extends HTMLElement ::
  constructor() :: super();
    this.attachShadow({mode: 'open'})

  async connectedCallback() ::
    const mode = this.getAttribute('mode') || 'content'
    const store = this.store ??= await this._init_store_()

    const [itm_host] = await itm_find_host(this)
    this._unsub_host = imm_evt @ itm_host, @{}
      itm_find_store(event) ::
        event.detail[mode] = store

  disconnectedCallback() ::
    this._unsub_host?.()

  async _init_store_() ::
    //let _bkc_stg = bkc_with_js_map()
    let _bkc_stg = bkc_with_web_db()
    let stg = await phorbas_store(_bkc_stg, { opaque: opaque_basic })

    await _mock_init_store(stg)
    return new ITMStore(stg)

