import { imm_wcemit, imm_raf, imm_evt } from 'imm-dom'
import { imm, imm_set, imm_html } from 'imm-dom'
export { imm_wcemit, imm_raf, imm_evt, imm, imm_set, imm_html, imm_html as h }

export const _itm_ctx_ = @{}
  with(kw) :: return {__proto__: this, ...kw}

  imm_wcemit, imm_raf, imm_evt,
  imm, imm_set, imm_html, h: imm_html,

const _rx_cdn = /^https?:\/\/|^\//


export async function import_at(store, url_or_key, opt) ::
  let js_url = _rx_cdn.test(url_or_key)
    ? new URL(url_or_key, globalThis.location)
    : await store.content_url_at(url_or_key, 'text/javascript')

  if js_url ::
    return await import(/* @vite-ignore */ js_url, {... opt})


const _rx_import = /^(?:(init)|(dep))(?:-\w+)?/
export function * _itm_import_deps({elem, store}) ::
  for let attr of elem.getAttributeNames() ::
    let is_dep = _rx_import.exec(attr)
    let url_or_key = is_dep && elem.getAttribute(attr)
    if url_or_key ::
      if is_dep[1] :: elem.removeAttribute(attr)

      yield import_at(store, url_or_key)


export async function _itm_init_deps(init_ctx) ::
  init_ctx = _itm_ctx_.with(init_ctx)
  for let module of _itm_import_deps(init_ctx) ::
    module = await module
    await module?.itm_init?.(init_ctx)

