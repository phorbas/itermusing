import { _itm_ctx_, imm_set } from './itm_utils.jsy'
import { itm_import_attrs } from './itm_import.jsy'
import { ItmElement } from './itm_element.jsy'

const itm_dyn_logic = @{}
  __proto__: _itm_ctx_

  find_mime_view(mime) ::
    let collection, viewmap, view
    for collection of [[this.viewmap], this._itm_.viewmaps] ::
      for viewmap of collection ::
        if viewmap ::
          view = viewmap.find_mime_view?.(mime) 
          view ??= viewmap.get(mime)
          if view :: return view

    if mime.includes('/') ::
      return this.find_mime_view('absent')

  async fetch_content(key, mime) ::
    if /^[0-9a-fA-F]+$/.test(key) ::
      key = 'bkc:'+key

    key = new URL(key, 'bkc:')
    let ab = await this._itm_.stg.bkc_fetch(key.pathname, this.signal)
    return mime && ab ? new Blob([ab], {type: mime}) : ab

  async render_view(wc_host) ::
    let mime = this.wc_host.getAttribute('mime')
    let hexkey = this.wc_host.getAttribute('k')
    let content = await this.fetch_content(hexkey, mime)
    let view_fn = this.view_for ?? this.find_mime_view(mime) ?? this.view_absent
    return view_fn.call(this, content, this, wc_host)

  view_absent(content) ::
    let el_absent = document.createComment(` View not found `)
    console.warn(el_absent, content)
    return el_absent


export class ItmView extends ItmElement ::
  async _itm_conn({signal}) ::
    let logic = itm_dyn_logic.with @: wc_host: this, signal
    for await let _itm_ of this.itm_disco() ::
      if ! _itm_.stg :: continue

      logic._itm_ = _itm_
      for await let [attr, module] of itm_import_attrs(this, _itm_.stg) ::
        module = await module
        logic = await module?.itm_view?.(logic, this, _itm_) ?? logic

      let el = await logic.render_view(this)
      if el :: imm_set(this, el)

