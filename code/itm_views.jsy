import { imm_evt } from 'imm-dom'
import { imm_html as h } from 'imm-dom'
import { itm_find_host } from './itm_utils.jsy'


const _basic_views = Object.entries @:
  'text/html': async content =>
    h.div @: '=innerHTML': await content.text()

  'text/plain': async content =>
    h.pre @ `${await content.text()}`


export class ITMViewMap ::
  as_itm_viewmap() :: return this

  _by_mime = new Map(_basic_views)
  async find_view_for({elem, mime, content}) ::
    let _by_mime = this._by_mime

    let fn = _by_mime.get(mime)
    while fn && !fn.call :: fn = _by_mime.get(fn) // resolve aliases
    return fn


export class ItermusingViews extends HTMLElement ::
  constructor() :: super();
    this.attachShadow({mode: 'open'})

  async connectedCallback() ::
    const mode = this.getAttribute('mode') || 'view'
    const viewmap = this.viewmap ??= new ITMViewMap

    const [itm_host] = await itm_find_host(this)
    this._unsub_host = imm_evt @ itm_host, @{}
      itm_find_view(event) ::
        event.detail[mode] = viewmap

  disconnectedCallback() ::
    this._unsub_host?.()
