export function when_map(opt) ::
  return _when_map(_when_proto_, opt)


export function _when_map(_entry_proto_, opt) ::
  const _db = opt?.db ?? new Map()
  const _subs_db = opt?.subscribers ?? new Map()
  return @{}
    __proto__: null
    has: key => !! _db.get(key)?.assigned
    get: key => _at(key).promise
    when: key => _at(key).promise

    async set_when(key, value) ::
      _at(key) // reference in the db
      this.set(key, value = await value) 
      return value

    set(key, value) ::
      let entry = _at(key)
      entry.resolve(value)

      _emit(key, value)
      return this

    delete(key) ::
      let entry = _db.get(key)
      entry?.fin() && _emit(key)
      return _db.delete(key)

    clear() ::
      let tuples = [... _db.entries()]
      _db.clear()

      for let [,entry] of tuples ::
        entry.fin()

      for let [key] of tuples ::
        _emit(key)


    keys: () => _db.keys()
    *values() :: for let [,entry] of _db :: yield entry.promise
    *entries() :: for let [key, entry] of _db :: yield [key, entry.promise]
    [Symbol.iterator]() :: return this.entries()

    aiter_values_at: (key, signal) => _at(key).aiter_values(key, signal)
    aiter_entries_at: (key, signal) => _at(key).aiter_entries(key, signal)
    subscribe(key_or_fn, ...args) ::
      if key_or_fn.call ::
        _subs_db.set(key_or_fn, args[0])
      else if key_or_fn.trim ::
        _at(''+key_or_fn).subscribe(...args)
      else throw TypeError()
      return this


  function _at(key) ::
    let entry = _db.get(key)
    if undefined === entry ::
      _db.set(key, entry=_entry_proto_.init(key))
    return entry

  function _emit(key, value) ::
    for let [emit_fn, signal] of _subs_db ::
      if ! signal?.aborted ::
        emit_fn(key, value)
      else _subs_db.delete(emit_fn)



const _when_proto_ = @{}
  assigned: false
  done: false

  init(key) ::
    let _dp = Promise.withResolvers()
    return @{} __proto__: this, key, $: _dp, promise: _dp.promise

  fin() ::
    this.done = true
    let _dp = this.$
    this.$ = null
    _dp?.resolve()
    return this

  resolve(value) ::
    this.promise = Promise.resolve(value)
    this.assigned = true

    let _dp = this.$
    this.$ = Promise.withResolvers()
    _dp.resolve(value)


  async * aiter_values(signal) ::
    yield this.promise

    while 1 ::
      if this.done || signal?.aborted :: return

      let value = await this.$.promise

      if this.done || signal?.aborted :: return

      yield value

  async * aiter_entries(signal) ::
    let key = this.key
    for await let value of this.aiter_values() ::
      yield [key, value]

  async subscribe(emit_fn, signal) ::
    let key = this.key
    for await let value of this.aiter_values(signal) ::
      emit_fn(key, value)

