//////
// Use CodeMirror if available
//   from Marijn Haverbeke and contributors
//   https://codemirror.net/

export const editas_codemirror = opt => @
  opt = {'viewport-margin': Infinity, ... opt}
  (content, ctx) => ::
    let el_wc = ctx.imtiny('wc-codemirror', {...opt})

    ::!>
      content = await content?.text()
      el_wc.value = content ?? ''

      el_wc.editor.on @ 'blur', @::>
        let done = await ctx.store_content(el_wc.value)
        console.log @ "Saved to %o", done


    return el_wc


//////
// Itermuse setup hook

export async function itermuse(ctx) ::
  ctx.mimeview_when @ 'wc-codemirror', @{}
    '#edit': editas_codemirror(),
    '#edit:codemirror': editas_codemirror(),

    'text/plain#edit': editas_codemirror({}),
    'text/markdown#edit': editas_codemirror({mode:'markdown'}),
    'text/html#edit': editas_codemirror({mode:'htmlmixed'}),
    'text/css#edit': editas_codemirror({mode:'css'}),
    'text/javascript#edit': editas_codemirror({mode:'javascript'}),


//////
// Itermuse initialization hook

const import_params = new URL(import.meta.url).searchParams
export async function init_itermuse(ctx) ::
  let include = import_params.get('include')
  if null != include ::
    autoload_codemirror(ctx, include)

  await itermuse(ctx)
  return true


export function autoload_codemirror(ctx, version, mode_list=['markdown', 'htmlmixed', 'css', 'javascript']) ::
  return ctx.use_cdn({
    base_url: `https://cdn.jsdelivr.net/npm/@vanillawc/wc-codemirror@${version || '2'}/`,
    paths: [
      'index.min.js',
      mode_list.map( mode => `mode/${mode}/${mode}.js` )
    ]})

